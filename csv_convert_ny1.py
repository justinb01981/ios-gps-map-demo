#! /usr/bin/env python3

import sys
import os
import csv

exemplar = """
CNN,Corridor,Limits,CNNRightLeft,BlockSide,FullName,WeekDay,FromHour,ToHour,Week1,Week2,Week3,Week4,Week5,Holidays,BlockSweepID,Line
9102000,Mission St,Julia St  -  08th St,L,SouthEast,Thursday,Thu,2,6,1,1,1,1,1,1,1618894,"LINESTRING (-122.412413343787 37.778045328617, -122.413157691449 37.777457419935)"
1191000,22nd St,Mission St  -  Bartlett St,L,South,Friday,Fri,6,8,1,1,1,1,1,0,1627862,"LINESTRING (-122.418747573844 37.75543693624, -122.419857942892 37.755365729245)"
4331000,Congdon St,Maynard St  -  Silver Ave,L,East,Wednesday,Wed,11,13,1,1,1,1,1,0,1637394,"LINESTRING (-122.42602470434 37.72939698234, -122.42596370352 37.72864102171)"
12043000,Sparta St,Ankeny St  -  Harkness Ave,R,West,Friday,Fri,12,15,1,1,1,1,1,0,1611118,"LINESTRING (-122.403554923986 37.718336652479, -122.403470376794 37.718196907433, -122.403750276633 37.717545887113)"
7602000,Jones St,Beach St  -  Jefferson St,R,East,Thursday,Thu,2,6,1,1,1,1,1,0,1616072,"LINESTRING (-122.417260631616 37.80707251417, -122.41744593863 37.808013324233)"
3354000,Buchanan St,Lombard St  -  Magnolia St,R,East,Mon 1st & 3rd,Mon,9,11,1,0,1,0,0,0,1602359,"LINESTRING (-122.432760489129 37.800260113743, -122.432863677741 37.800773004309)"
6047102,Geary Blvd,Wood St  -  Collins St,L,South,Monday,Mon,6,8,1,1,1,1,1,0,1606038,"LINESTRING (-122.449047323854 37.78217743771, -122.449988236955 37.782057031823, -122.450092302229 37.782116603421)"
2023000,46th Ave,Kirkham St  -  Lawton St,R,West,"Tue 1st, 3rd, 5th",Tues,12,14,1,0,1,0,1,0,1646083,"LINESTRING (-122.505796847208 37.758559525374, -122.505665481786 37.75669307559)"
7246000,Ingerson Ave,Gilroy St  -  Griffith St,R,NorthEast,Saturday,Sat,7,8,1,1,1,1,1,0,1623563,"LINESTRING (-122.389135962128 37.716879304457, -122.389277654334 37.716961295467)"
"""

exemplar2 = """
the_geom,PHYSICALID,L_LOW_HN,L_HIGH_HN,R_LOW_HN,R_HIGH_HN,L_ZIP,R_ZIP,L_BLKFC_ID,R_BLKFC_ID,ST_LABEL,STATUS,BIKE_LANE,BOROCODE,ST_WIDTH,CREATED,MODIFIED,TRAFDIR,RW_TYPE,FRM_LVL_CO,TO_LVL_CO,SNOW_PRI,PRE_MODIFI,PRE_DIRECT,PRE_TYPE,POST_TYPE,POST_DIREC,POST_MODIF,FULL_STREE,ST_NAME,BIKE_TRAFD,SEGMENT_TY,SHAPE_Leng
"MULTILINESTRING ((-74.01793061274537 40.70617486563979, -74.01786933958108 40.70634871855227, -74.01778897787625 40.70651868456784, -74.01769028387064 40.70668296244674, -74.01757437049282 40.70683986715218))",3,50,64,51,63,10280,10280,212262587,1222601917,BATTERY PL,2,,1,42,11/29/2007 12:00:00 AM,03/17/2017 12:00:00 AM,TW,1,13,13,C,,,,PL,,,BATTERY PL,BATTERY,,U,262.77781228
"MULTILINESTRING ((-74.01757437049282 40.70683986715218, -74.01712051881411 40.70746253088078))",5,66,82,65,81,10280,10280,1222600642,1222604562,BATTERY PL,2,,1,42,11/29/2007 12:00:00 AM,03/17/2017 12:00:00 AM,TW,1,13,13,C,,,,PL,,,BATTERY PL,BATTERY,,U,259.415988519
"MULTILINESTRING ((-74.01712051881411 40.70746253088078, -74.01662578576105 40.70813393464956))",6,84,98,83,101,10280,10280,1222600640,1222600933,BATTERY PL,2,,1,42,11/29/2007 12:00:00 AM,03/17/2017 12:00:00 AM,TW,1,13,13,C,,,,PL,,,BATTERY PL,BATTERY,,U,280.444780871
"MULTILINESTRING ((-74.01693786186667 40.704813986597024, -74.01704963744208 40.70483662931336))",8,,,,,10280,10280,212262587,1222600931,BATTERY PL,2,,1,42,11/29/2007 12:00:00 AM,07/18/2017 12:00:00 AM,TW,1,13,13,C,,,,PL,,,BATTERY PL,BATTERY,,U,32.0701391509
"MULTILINESTRING ((-74.01428922948978 40.70454907535256, -74.01437031212745 40.70455803784475, -74.01451712300867 40.704605675392386, -74.01466709872304 40.70464721296995, -74.01478059501136 40.704674113029824, -74.01489542085365 40.70469751835281, -74.014961252156 40.70475979724394))",14,,,,,10004,10004,212262587,212262395,BATTERY PL,2,,1,24,04/22/2011 12:00:00 AM,04/15/2019 12:00:00 AM,TF,1,13,13,C,,,,PL,,,BATTERY PL,BATTERY,,T,206.27185039
"
"""

rowformat = ['CNN', 'Corridor', 'CNNRightLeft', 'FullName', 'WeekDay', 'FromHour', 'ToHour', 'Week1', 'BlockSweepID', 'Line']
# maps 1:1 with rowformat above
srcformat = ['ST_NAME', 'FULL_STREE', 'PRE_DIRECT', 'ST_LABEL', 'STATUS', 'R_ZIP', 'L_ZIP', 'PRE_TYPE','PHYSICALID', 'the_geom']

def OpenCsv(arg, writemode=False):
    if writemode:
        return open(arg, 'w', newline='')
    else:
        return open(arg, 'r', newline='')


mreader = csv.DictReader(OpenCsv(sys.argv[1]), delimiter=',', quotechar='|', dialect='excel')
mwriter = csv.DictWriter(OpenCsv(sys.argv[1]+".converted.csv", writemode=True), rowformat, delimiter=',', dialect='excel')

count = 0
for row in mreader: ## for each row 



    ## CNN,Corridor,Limits,CNNRightLeft,BlockSide,FullName,WeekDay,FromHour,ToHour,Week1,Week2,Week3,Week4,Week5,Holidays,BlockSweepID,Line
    outrow = {}

    fi = 0
    while fi < len(rowformat):
        try:
            outrow[ rowformat[fi] ] = row[ srcformat[fi] ]
            print("row ok")
        finally:
            fi = 99999
            continue
        
    ## build output row with new col mappings

    mwriter.writerow(outrow)

    count += 1

